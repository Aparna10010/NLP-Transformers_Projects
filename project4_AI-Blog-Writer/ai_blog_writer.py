# -*- coding: utf-8 -*-
"""AI-Blog-Writer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lN0_CC4KqsXvRgPhfhy1zolEd37HjQsy

# **Some installations**
"""

# To load models like BART , T5
!pip install transformers
#for transformers models support
!pip install sentencepiece
#for deployement
!pip install gradio

"""# **Import Required Libraries**"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from transformers import pipeline , AutoTokenizer , AutoModelForSeq2SeqLM , GPT2LMHeadModel , GPT2Tokenizer , set_seed
import torch
import gradio as gr

"""# **Model Selection**

I selected state-of-the-art Transformer models from Hugging Face for different tasks like :
- Title Generation : GPT-2
- Summmary Generation : bart-large-cnn
- Content Generation : GPT-2 or t5-small

# **Title Generation**

Generating title for the blog using GPT-2 based on the user's input.
"""

# For consistency
set_seed(42)

# loading the GPT-2 Model for generating text:
title_generator = pipeline("text-generation" ,
                           model = "gpt2", # this will help to generate blog on given topic by user
                           tokenizer = "gpt2",
                           device=0,
                           pad_token_id = 50256 ) #Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.

# Taking the input from the user for the topic of blog:
topic_blog = input("Enter your blog topic : ")

# Generate the title of blog:
title = title_generator(f"Blog Title : {topic_blog}", # to generate title
                        #max_length = 10, #total words in output
                        truncation=True,
                        max_new_tokens = 10,
                        num_return_sequences = 1) # to get only one title

# Extracting the generated text from the title:
title = title[0]['generated_text']

# Cleaning the title to avoid inconsistency:
cleaned_title = title.replace("Blog Title:" , "").strip()

print("Generated Blog Title :\n", cleaned_title)

"""# **Summary Generation using BART**"""

# To generate summary for our blog topic using "facebook/bart-large-cnn" via Hugging FAce

# loading the BART model.
summarizer = pipeline("summarization",
                      model = "facebook/bart-large-cnn"
                      )

# Taking the input from user for the paragraph that they want to summarize:
para_for_Summarization = input("Enter a paragraph or content for Summarization")

# Generating the Summary :
summary_generated = summarizer(para_for_Summarization,
                               max_length = 500,
                               min_length = 20,
                               do_sample = False # to avoid randomness
                               )

# Printing the Summary text :
print("\n Generated Summary :\n", summary_generated[0]['summary_text'])

"""# **Blog Content Generation using GPT-2**

To generate full atricle using GPT-2 *model*
"""

set_seed(42)

# Loading the GPT-2 model for generating text
content_generator = pipeline("text-generation",
                             model = "gpt2",
                             pad_token_id = 50256
                             )
# Taking the topic of blog from the user:
blog_topic = input("Enter the Topic for generating the blog : ")

# Content generation :
generated = content_generator(blog_topic,
                              max_new_tokens = 200,
                              temperature = 0.9 , # for enhancing the creativity
                              top_k = 50, # to limit sampling
                              num_return_sequences = 1)

# Printing the results:
blog_content = generated[0]['generated_text']
print("\n Generated Blog Content:\n")
print(blog_content)

"""# **Gradio**"""

# For reproducibility
set_seed(43)

# Load all models
title_generator = pipeline("text-generation",
                           model="gpt2",
                           tokenizer="gpt2",
                           pad_token_id=50256)

summarizer = pipeline("summarization",
                      model="facebook/bart-large-cnn")

content_generator = pipeline("text-generation",
                             model="gpt2",
                             pad_token_id=50256)

# Generate blog title
def generate_title(topic):
    result = title_generator(f"Blog Title: {topic}",
                             max_new_tokens=10)
    title = result[0]['generated_text']
    return title.replace("Blog Title:", "").strip()

# Generate summary
def generate_summary(paragraph):
    result = summarizer(paragraph,
                        max_length=100,
                        min_length=20,
                        do_sample=False)
    summary = result[0]['summary_text']
    return summary

# Generate full blog content
def generate_full_blog(content_title):
    prompt = f"Write a blog about {content_title}.\n"
    result = content_generator(prompt,
                            max_length=300,
                            num_return_sequences=1,
                            do_sample=True,
                            temperature=0.7)
    return result[0]['generated_text']

"""# **Gradio Interface**"""

with gr.Blocks() as demo:
  gr.Markdown("# AI BLOG WRITER Using Transformers")

# For Title UI
  topic = gr.Textbox(label = "Enter Blog Topic")
  btn_title = gr.Button("Generate Blog Title")
  title_op = gr.Textbox(label='Generated Title')

  btn_title.click(fn = generate_title,
                  inputs = topic,
                  outputs = title_op)
  gr.Markdown("---")

# For Summarization UI
  paragraph = gr.Textbox(label = "Enter Paragraph for summarising")
  btn_para = gr.Button("Generate Blog Summary")
  para_op = gr.Textbox(label='Generated Summary')

  btn_para.click(fn = generate_summary,
                  inputs = paragraph,
                  outputs = para_op)
  gr.Markdown("---")

# For Content gen UI:
  content = gr.Textbox(label = "Enter Topic for Blog")
  btn_content = gr.Button("Generate Full Blog")
  content_op = gr.Textbox(lines = 10,label='Generated Full Blog')

  btn_content.click(fn = generate_full_blog,
                  inputs = content,
                  outputs = content_op)


  # Launching the App:
  demo.launch(share = True)