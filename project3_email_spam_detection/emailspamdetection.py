# -*- coding: utf-8 -*-
"""EmailSpamDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RJ67ywhg4zvnNwSobjPdRjlvl2Px1c01
"""

!pip install streamlit

"""# **Load the Necessary Libraries**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score , classification_report
from transformers import pipeline
import streamlit as st

"""# **Load the Dataset**"""

data = pd.read_csv("/content/spam.csv",
                   encoding = 'latin-1')[['v1','v2']]

data.columns = ['label' , 'message']

data.head()

"""# **Split the data using train-test-split**"""

X_train , X_test , y_train , y_test = train_test_split(data['message'],
                                                       data['label'],
                                                       test_size=0.2,
                                                       random_state = 42)

"""# **TF-IDF Vectorizer**"""

vectorizer = TfidfVectorizer(stop_words = 'english')

X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

"""# **Train the Model using Naive Bayes**"""

model = MultinomialNB()
model.fit(X_train_tfidf,y_train)


# Evaluation
y_pred_nb = model.predict(X_test_tfidf)
print("Accuracy:" , accuracy_score(y_test , y_pred_nb))
print("\n Classification report: \n ",classification_report(y_test , y_pred_nb))

"""# **Save the Model and vectorizer**"""

import joblib

joblib.dump(model , "spam_model.pkl")
joblib.dump(vectorizer, "tf-idf_vectorizer.pkl")

"""# **Using the saved that we trained**"""

import joblib
vectorizer = joblib.load("tf-idf_vectorizer.pkl")
model = joblib.load("spam_model.pkl")

# Transforming new data with saved model
new = ["Congratulations , you won a hamper"]
new_tfidf = vectorizer.transform(new)

# Prediction
model.predict(new_tfidf)

"""# **Train the Model using Logistics Regression**"""

lor = LogisticRegression(max_iter = 1000)
lor.fit(X_train_tfidf , y_train)

# Predict
y_pred_lr = lor.predict(X_test_tfidf)

# Evaluation
y_pred_lr = model.predict(X_test_tfidf)
print("Accuracy:" , accuracy_score(y_test , y_pred_lr))
print("\n Classification report: \n ",classification_report(y_test , y_pred_lr))

"""# **Using Zero Shot Classification**

"""

cls = pipeline("zero-shot-classification",
               model = "facebook/bart-large-mnli")

text = "Congratualtion , You won a lottery worth 1 crore ruppees!Click on given link"
text_2 = "Free mobile recharge "

labels = ["This is a spam message","This is a regular message"]
result = cls(text, candidate_labels = labels)
result_2 = cls(text_2, candidate_labels = labels)

# Printing the results
print(result)
print(result_2)

"""# **Streamlit UI**"""

import joblib
import streamlit as st
from transformers import pipeline

# Load vectorizer and model
vectorizer = joblib.load("tf-idf_vectorizer.pkl")
model = joblib.load("spam_model.pkl")

# Load Zero-Shot Classification pipeline
cls = pipeline("zero-shot-classification", model="facebook/bart-large-mnli")

# Streamlit UI
st.title("Email Spam Detection")

# User input
text = st.text_area("Enter Email:")

# Choose model
option = st.selectbox("Choose Method:", ["Traditional ML", "Zero-Shot Transformer"])

if st.button("Predict"):
    if text.strip() == "":
        st.warning("Please enter some text.")
    else:
        if option == "Traditional ML":
            features = vectorizer.transform([text])
            result = model.predict(features)[0]
            st.success(f"ML Model Prediction: {result}")
        else:
            labels = ["spam", "ham"]
            result = cls(text, candidate_labels=labels)
            st.success(f"Zero-Shot Prediction: {result['labels'][0]} ({round(result['scores'][0]*100, 2)}% confidence)")

